package usuario;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.GregorianCalendar;

import utilitarios.Console;
import utilitarios.LtpUtil;
import dados.Cliente;
import dados.Produto;
import cadastro.Cadastro;

public class Usuario {
	public static void main(String args[]) {
	
			if (new File("Vendas.obj").exists()) {
				lerArqVendas();
				int ultCod = Cadastro.listaClientes.get(Cadastro.listaClientes.size()-1).getCodigo();
				Cliente.setSeq(ultCod);
			}
			menu();
			gravarArqCliente();
			System.out.println("\nFinalizar...");
			System.exit(0);
		}

		private static void gravarArqCliente() {
			try {
				ObjectOutputStream out = 
					new ObjectOutputStream(new FileOutputStream("Vendas.obj"));
				out.writeObject(Cadastro.listaClientes);
				out.close();
			} catch (Exception erro) {
				System.out.println(erro.getMessage());
				System.exit(2); // Termino por falha na grava巫o do arquivo
			}
			
		}

		private static void lerArqVendas() {
			try {
				ObjectInputStream inp = 
					new ObjectInputStream(new FileInputStream("Vendas.obj"));
				 Cadastro.listaClientes= (ArrayList<Cliente>)inp.readObject();
				inp.close();
			} catch (Exception erro) {
				System.out.println(erro.getMessage());
				System.exit(1); // termino por falha na leitura do arquivo
			}
			
		}
		
		private static void menu() {
			int opcao = 0;
			do {
				System.out.println("--------# Sistema de controle de vendas #--------");
				System.out.println("-1-Incluir novo cliente");
				System.out.println("-2-Alterar o cliente via codigo");
				System.out.println("-3-Excluir um cliente via codigo");
				System.out.println("-4-Consultar o cliente via cpf");
				System.out.println("-5-Consultar cliente em ordem alfabetica pelo nome");
				System.out.println("-6-Incluir um novo produto");
				System.out.println("-7-Alterar o produto via codigo");
				System.out.println("-8-Excluir o produto via codigo");
				System.out.println("-9-Consultar produto em ordem alfabetica pelo nome");
				System.out.println("-10-Incluir uma venda");
				System.out.println("-11-Excluir venda");
				System.out.println("-12-Consultar as vendas pelo periodo em ordem de cliente e data de venda");
				System.out.println("-13-Consultar estatisticas de venda por cliente");
				opcao = Console.readInt("Informe a opcao desejada: ");
				int codigo;
				switch (opcao) {
					case 1:
						incluirCliente();
						break;
					case 2:
						codigo = Console.readInt("Informe o codigo: ");
						buscarPorCod(codigo);
						String valida = Console.readLine("Voc칡 deseja alterar este cliente? ");
						System.out.println("Informe SIM OU N츽O");
							if (valida.equalsIgnoreCase("SIM")) {
								alterarClienteCod(codigo);
							} else {
								break;
							}
						break;
					case 3:
						codigo = Console.readInt("Informe o codigo: ");
						buscarPorCod(codigo);
						String valida1 = Console.readLine("Voc칡 deseja alterar este cliente? ");
						System.out.println("Informe SIM OU N츽O");
							if (valida1.equalsIgnoreCase("SIM")) {
								cadastro.Cadastro.excluirCliente(Cliente obj);
								//Verificar isto
							} else {
								break;
							}
						break;
					case 4:
						String cpf = Console.readLine("Informe o cpf do cliente");
						break;
					case 5:
						
						break;
					case 6:
						
						break;
					case 7:
						
						break;
					case 8:
						
						break;
					case 9:
						
						break;
					case 10:
						
						break;
					case 11:
						
						break;
					case 12:
						
						break;
					case 13:
						
						break;
					default:
						System.out.println("Op칞칚o inv치lida!");
						break;
				}
			}while(opcao!=0);
		}
		
	
	//Incluir um novo cliente
	public static void incluirCliente() {
		System.out.println("\n" + "Incluir um novo cliente no banco.");
		String cpf;
		while(true) 
		{
			cpf = Console.readLine("CPF: ");
			if(!LtpUtil.validarCPF(cpf)) 
			{
				System.out.println("CPF inv치lida");
				continue;
			}
			Cliente objcliente = cadastro.Cadastro.pesqClienteCpf(cpf);
			if (objcliente!=null) 
			{
				System.out.println("J치 existe cliente para o CPF");
				continue;
			} else break;
		}
		String nome;
		String telefone;
		String email;
		while (true) 
		{
			nome = Console.readLine("Nome: ").trim();
			if (nome.isEmpty()) 
			{
				System.out.println("Falta informar o nome.");
			} else break;
		}
		while (true) 
		{
			telefone = Console.readLine("Telefone: ");
			if (telefone.isEmpty()) 
			{
				System.out.println("Falta informar o telefone.");
			} else break;
		}
		while (true) 
		{
			email = Console.readLine("E-mail: ");
			if (email.isEmpty()) 
			{
				System.out.println("Falta informar o e-mail.");
			} else break;
		}
		GregorianCalendar dataInclusao = new GregorianCalendar();
		while(true) {
			String data = Console.readLine("Data de cadastro: ");
			if(!LtpUtil.validarData(data, dataInclusao)) {
				System.out.println("Data inv치lida.");
				continue;
			}
			if (dataInclusao.after(new GregorianCalendar())) {
				System.out.println("Data entrada superior a data de hoje");
			} else break;
		}
		
		ArrayList<Cliente> clientes = new ArrayList<Cliente>();
		clientes.add(new Cliente(cpf, nome, telefone, email, dataInclusao, null));
		System.out.println("\nCliente cadastradono sistema.");
	}
	//Alterar o cliente via codigo
	private static void alterarClienteCod (int cod) {
		System.out.println("\n" + "Alterar um cliente no sistema.");
		String cpf;
		while(true) 
		{
			cpf = Console.readLine("CPF: ");
			if(!LtpUtil.validarCPF(cpf)) 
			{
				System.out.println("CPF inv치lida");
				continue;
			}
			Cliente objcliente = cadastro.Cadastro.pesqClienteCpf(cpf);
			if (objcliente!=null) 
			{
				System.out.println("J치 existe cliente para o CPF");
				continue;
			} else break;
		}
		String nome;
		String telefone;
		String email;
		while (true) 
		{
			nome = Console.readLine("Nome: ").trim();
			if (nome.isEmpty()) 
			{
				System.out.println("Falta informar o nome.");
			} else break;
		}
		while (true) 
		{
			telefone = Console.readLine("Telefone: ");
			if (telefone.isEmpty()) 
			{
				System.out.println("Falta informar o telefone.");
			} else break;
		}
		while (true) 
		{
			email = Console.readLine("E-mail: ");
			if (email.isEmpty()) 
			{
				System.out.println("Falta informar o e-mail.");
			} else break;
		}
		GregorianCalendar dataInclusao = new GregorianCalendar();
		while(true) {
			String data = Console.readLine("Data de cadastro: ");
			if(!LtpUtil.validarData(data, dataInclusao)) {
				System.out.println("Data inv치lida.");
				continue;
			}
			if (dataInclusao.after(new GregorianCalendar())) {
				System.out.println("Data entrada superior a data de hoje");
			} else break;
		}
		
		ArrayList<Cliente> clientes = new ArrayList<Cliente>();
		clientes.add(new Cliente(cpf, nome, telefone, email, dataInclusao, null));
		System.out.println("\nCliente cadastradono sistema.");
	}
	//Buscar cliente por cpf
	private static Cliente buscarPorCpf(String cpf) {
		Cliente obj = cadastro.Cadastro.pesqClienteCpf(cpf);
		if (obj != null) { 
			System.out.println(obj.toString());
		} else {
			System.out.println("N칚o existe cliente neste codigo");
		}
		return null;
	}
	//Buscar cliente por cod
	private static Cliente buscarPorCod(int codigo) {
		Cliente obj = cadastro.Cadastro.pesqClienteCod(codigo);
		if (obj != null) { 
			System.out.println(obj.toString());
		} else {
			System.out.println("N칚o existe cliente neste codigo");
		}
		return null;
	}
	//Verificar se tem venda cadastrada para o cliente em quest伋.
	private static Cliente excluirCliente(int codigo) {
		Cliente obj = cadastro.Cadastro.pesqClienteCod(codigo);
		if (obj != null) { 
			System.out.println(obj.toString());
		} else {
			System.out.println("N칚o existe cliente neste codigo");
		}
		return null;
	}
	//verifica巫o da variavel pre每
	private static void incluirProduto() {
		while(true) {
			String nome = Console.readLine("Informe o nome do produto: ");
			if(nome.isEmpty()) {
				System.out.println("Falta informar um nome");
			} else break;
		}
		while(true) {
			double preco = Console.readDouble("Informe o pre每 do produto: ");
			if(preco < 0) {
				System.out.printf("\nInforme um preco maior que 0!");
				continue;
			}
			else {
				break;
			}
		}
	}
	private static void alterarProduto() {
		while(true) {
			String nome = Console.readLine("Informe o nome do produto: ");
			if(nome.isEmpty()) {
				System.out.println("Falta informar um nome");
			} else break;
		}
		while(true) {
			double preco = Console.readDouble("Informe o pre每 do produto: ");
			if(preco < 0) {
				System.out.printf("\nInforme um preco maior que 0!");
				continue;
			}
			else {
				break;
			}
		}
	}
	//Excluir produto via codigo
	private static Produto excluirProdutoCod(int codigo) {//Verificar se tem venda cadastrada
		Produto obj = cadastro.Cadastro.pesqProdutoCod(codigo);
		if (obj != null) { 
			System.out.println(obj.toString());
			cadastro.Cadastro.excluirProduto(obj);
			System.out.println("O produto foi excluido com sucesso!");
		} else {
			System.out.println("N칚o existe cliente neste codigo");
		}
		return null;
	}
	private static void incluirVenda() {//Incluir venda por CPF
		String cpf;
		while(true) 
		{
			cpf = Console.readLine("CPF: ");
			if(!LtpUtil.validarCPF(cpf)) 
			{
				System.out.println("CPF inv치lida");
				continue;
			}
			Cliente objcliente = cadastro.Cadastro.pesqClienteCpf(cpf);
			if (!objcliente.equals(cpf)) 
			{
				System.out.println("N伋 existe cliente para o cpf");
				continue;
			} else break;
		}
		GregorianCalendar dataInclusao = new GregorianCalendar();
		while(true) {
			String data = Console.readLine("Informe a data de venda: ");
			if(!LtpUtil.validarData(data, dataInclusao)) {
				System.out.println("Data inv치lida.");
				continue;
			}
			if (dataInclusao.after(new GregorianCalendar())) {
				System.out.println("Data entrada superior a data de hoje");
			} else break;
		}
		while(true) {
			int quantidade = Console.readInt("Informe a quantidade de vendas: ");
			if (quantidade <= 0) {
				System.out.println("A quantidade tem que ser maior que zero!");
			}else {
				break;
			}
		}
		
		int valor;//VALOR = QUANTIDADE X VALOR DO PRODUTO;
		
	}
}
